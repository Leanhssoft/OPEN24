@using System.Web.Optimization;
@using banhang24.Hellper;

<div class="op-container" id="reportPhuTungTheoDoi">
    <div class="container-fluid nopadding position-relative">
        <div class="op-baocao-type">
            <ul class="floatleft">
                <li>
                    <label>
                        <input type="radio" name="LoaiBaoCao" value="1" class="radio-option" v-model="LoaiBaoCao"/>
                        Phụ tùng theo dõi
                    </label>
                </li>
                <li>
                    <label>
                        <input type="radio" name="LoaiBaoCao" value="2" class="radio-option" v-model="LoaiBaoCao"/>
                        Thời gian hoạt động
                    </label>
                </li>
            </ul>
        </div>
        <div class="col-left">
            <div class="op-filter">
                <section class="op-filter-body">
                    <article class="boxLeft op-baocao-classic">
                        <h3 class="op-filter-title" onclick="toggleSubFilter(this)">
                            <img src="/Content/images/icon/report-loaibaocao.png"> Loại báo cáo
                        </h3>
                        <aside class="op-filter-container">
                            <div class="menuCheckbox">
                                <ul class="floatleft">
                                    <li>
                                        <label>
                                            <input type="radio" name="LoaiBaoCao" value="1" class="radio-option" v-model="LoaiBaoCao" />
                                            Phụ tùng bảo hành
                                        </label>
                                    </li>
                                    <li>
                                        <label>
                                            <input type="radio" name="LoaiBaoCao" value="2" class="radio-option" v-model="LoaiBaoCao" />
                                            Thời gian hoạt động
                                        </label>
                                    </li>
                                </ul>
                            </div>
                        </aside>
                    </article>
                    <article class="boxLeft" v-show="LoaiBaoCao === '2'">
                        <h3 class="op-filter-title" onclick="toggleSubFilter(this)">
                            <img src="~/Content/images/icon/ngaytao.png" />
                            Thời gian
                        </h3>
                        <filter-datetime radioname="rdThoiGian" v-bind:typetime="ThoiGianTypeTime"
                                         v-on:callfunction="onCallThoiGian"
                                         v-bind:selectvalue="defaultThoiGianFilterValue"></filter-datetime>
                    </article>
                    <article class="boxLeft" v-show="LoaiBaoCao === '1'">
                        <h3 class="op-filter-title" onclick="toggleSubFilter(this)">
                            <img src="~/Content/images/icon/ngaytao.png" />
                            Trạng thái
                        </h3>
                        <filter-checkbox v-bind:listitem="ListTrangThai" v-on:callfunctionloaddata="oncallTrangThaiSelect"></filter-checkbox>
                    </article>
                </section>
            </div>
        </div>
        <div class="col-right">
            <div class="op-header">
                <div class="op-header-title op-baocao-title">
                    <h2 class="title" onclick="showTypeBc()">Báo cáo phụ tùng theo dõi</h2>
                </div>
                <div style="height:unset; text-align:center;">
                    <h4 class="floatleft flex flex-center">
                        <label>{{BaoCaoTieuDe}}</label>
                    </h4>
                    <span class="floatleft showTodayBC" v-show="['2'].includes(LoaiBaoCao)">{{ BaoCaoThoiGianText }}</span>
                </div>
                <div class="flex flex-between">
                    <div class="header-button">
                        <div style="position:relative" class="btn-dropdown" id="select-column">
                            <button type="button" class="btn btn-main dropdown-toggle" onclick="showCollumnFilter(this)" aria-haspopup="true" aria-expanded="false">
                                <i class="fa fa-angle-double-down"></i>
                            </button>
                            <div class="dropdown-list">
                                <ul>
                                    <li v-for="item in ListHeader">
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox" class="checkbox" v-model="item.colShow" />
                                                <span></span>
                                                {{item.colText}}
                                            </label>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="flex">
                        <div class="op-search">
                            <input type="text" class="form-control" v-model="TextSearch" placeholder="Tìm kiếm ..." v-on:keyup="TextSearchOnKeyUp"/>
                            <button type="button" class="op-search-button" v-on:click="TextSearchChange">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                        <button class="btn btn-main op-filter-toggle" onclick="showFilter()" title="Hiển thị bộ lọc">
                            <i class="material-icons">sort</i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="content-table">
                <div class="tab-content tab-show no-padding" v-bind:style="{filter: isLoading === true ? 'blur(3px)' : ''}">
                    <div v-if="LoaiBaoCao === '1'">
                        <div class="table-reponsive table-frame">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th v-for="item in ListHeader.filter(p=>p.colShow === true)">{{item.colText}}</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="itemPhuTung in BaoCaoPhuTungTheoDoi.data">
                                        <td v-if="ListHeader.find(p => p.colName === 'colMaHangHoa').colShow">{{itemPhuTung.MaHangHoa}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colTenHangHoa').colShow">{{itemPhuTung.TenHangHoa}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colBienSo').colShow">{{itemPhuTung.BienSo}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colNgayTheoDoi').colShow">{{moment(itemPhuTung.NgayLapHoaDon).format('DD/MM/YYYY HH:mm')}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colDinhMucBaoDuong').colShow">{{itemPhuTung.DinhMucBaoDuong}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colThoiGianHoatDong').colShow">{{itemPhuTung.ThoiGianHoatDong}}</td>
                                        <td v-if="ListHeader.find(p => p.colName === 'colThoiGianConLai').colShow">{{itemPhuTung.ThoiGianConLai}}</td>
                                    </tr>
                                </tbody>
                                <tfoot v-show="BaoCaoPhuTungTheoDoi.data.length<=0 || isLoading">
                                    <tr>
                                        <td v-show="!isLoading" class="  text-center" v-bind:colspan="ListHeader.filter(p=>p.colShow === true).length"><i>Không có dữ liệu</i></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <page-list v-bind:pagesize="BaoCaoPhuTungTheoDoi.PageList.PageSize"
                                   v-bind:listpage="BaoCaoPhuTungTheoDoi.PageList.ListPage" v-bind:currentpage="BaoCaoPhuTungTheoDoi.PageList.currentPage" v-bind:pageview="BaoCaoPhuTungTheoDoi.PageList.PageView"
                                   v-bind:numberofpage="BaoCaoPhuTungTheoDoi.PageList.NumberOfPage"
                                   v-on:pageselected="PageChageBaoCaoPhuTungTheoDoi"></page-list>
                    </div>
                    <div v-if="LoaiBaoCao === '2'">
                        <div class="table-reponsive table-frame">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th v-for="item in ListHeader.filter(p=>p.colShow === true)">{{item.colText}}</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="itemHoatDong in BaoCaoThoiGianHoatDong.data">
                                        <td>{{itemHoatDong.BienSo}}</td>
                                        <td>{{itemHoatDong.SoLanThucHien}}</td>
                                        <td>{{itemHoatDong.TongThoiGianThucHien}}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <page-list v-bind:pagesize="BaoCaoThoiGianHoatDong.PageList.PageSize"
                                   v-bind:listpage="BaoCaoThoiGianHoatDong.PageList.ListPage" v-bind:currentpage="BaoCaoThoiGianHoatDong.PageList.currentPage" v-bind:pageview="BaoCaoThoiGianHoatDong.PageList.PageView"
                                   v-bind:numberofpage="BaoCaoThoiGianHoatDong.PageList.NumberOfPage"
                                   v-on:pageselected="PageChangeBaoCaoNhatKyHoatDong"></page-list>
                    </div>
                </div>
                <div v-show="isLoading" class="table-loading">
                    <div class="loading">
                    </div>
                    <div style="text-align: center;">
                        Đang tải dữ liệu, vui lòng chờ ...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="@Url.ContentVersioned("~/Scripts/Components/filter-datetime.js")"></script>
<script src="@Url.ContentVersioned("~/Scripts/Components/page-list.js")"></script>
<script src="@Url.ContentVersioned("~/Scripts/Components/filter-checkbox.js")"></script>
<script>
    var vReportPhuTung = new Vue({
        el: '#reportPhuTungTheoDoi',
        data: {
            UrlApi: {
                ReportApi: '/api/ReportAPI/'
            },
            ListHeader: [],
            BaoCaoTieuDe: "Báo cáo phụ tùng theo dõi",
            LoaiBaoCao: '1',
            TextSearch: "",
            BaoCaoPhuTungTheoDoi: {
                data: [],
                Reload: true,
                PageList: {
                    ListPage: [1],
                    PageView: "",
                    NumberOfPage: 1,
                    PageSize: 10,
                    currentPage: 1
                },
                isPageSelect: false
            },
            BaoCaoThoiGianHoatDong: {
                data: [],
                Reload: true,
                PageList: {
                    ListPage: [1],
                    PageView: "",
                    NumberOfPage: 1,
                    PageSize: 10,
                    currentPage: 1
                },
                isPageSelect: false
            },
            isPageSelect: false,
            isLoading: true,
            ThoiGianTypeTime: 0,
            ThoiGianFrom: '',
            ThoiGianTo: '',
            defaultThoiGianFilterValue: 5,
            onRefresh: true,
            BaoCaoThoiGianText: '',
            ListTrangThai: [{ Text: 'Đến hạn', Value: 1, Checked: true }, { Text: 'Chưa đến hạn', Value: 2, Checked: true }],
        },
        methods: {
            InitHeaderPhuTungTheoDoi: function () {
                return [{ colName: "colMaHangHoa", colText: "Mã hàng hóa", colShow: true, index: 0 },
                { colName: "colTenHangHoa", colText: "Tên hàng hóa", colShow: true, index: 1 },
                { colName: "colBienSo", colText: "Biển số", colShow: true, index: 2 },
                { colName: "colNgayTheoDoi", colText: "Ngày theo dõi", colShow: true, index: 3 },
                { colName: "colDinhMucBaoDuong", colText: "Định mức bảo dưỡng", colShow: true, index: 4 },
                { colName: "colThoiGianHoatDong", colText: "Thời gian hoạt động", colShow: true, index: 5 },
                { colName: "colThoiGianConLai", colText: "Thời gian còn lại", colShow: true, index: 6 }];
            },
            InitHeaderThoiGianHoatDong: function () {
                return [{ colName: "colBienSo", colText: "Biển số", colShow: true, index: 0 },
                { colName: "colSoLuongNhatKy", colText: "Số lần thực hiện", colShow: true, index: 1 },
                { colName: "colTongThoiGianHoatDong", colText: "Thời gian thực hiện", colShow: true, index: 2 }];
            },
            GetHeader: function () {
                let self = this;
                switch (self.LoaiBaoCao) {
                    case '1':
                        self.ListHeader = self.InitHeaderPhuTungTheoDoi();
                        break;
                    case '2':
                        self.ListHeader = self.InitHeaderThoiGianHoatDong();
                        break;
                    default:
                        self.ListHeader = [];
                        break;
                }
            },
            GetBaoCaoTieuDe: function () {
                let self = this;
                switch (self.LoaiBaoCao) {
                    case '1':
                        self.BaoCaoTieuDe = "Báo cáo phụ tùng theo dõi";
                        break;
                    case '2':
                        self.BaoCaoTieuDe = "Báo cáo thời gian hoạt động";
                        break;
                    default:
                        self.BaoCaoTieuDe = "";
                        break;
                }
            },
            LoadData: function () {
                let self = this;
                self.isLoading = true;
                switch (self.LoaiBaoCao) {
                    case '1':
                        if (self.BaoCaoPhuTungTheoDoi.Reload) {
                            self.LoadPhuTungTheoDoi();
                        }
                        else {
                            self.isLoading = false;
                        }
                        break;
                    case '2':
                        if (self.BaoCaoThoiGianHoatDong.Reload) {
                            self.LoadNhatKyHoatDong();
                        }
                        else {
                            self.isLoading = false;
                        }
                        break;
                    default:
                        break;
                }
                self.onRefresh = false;
            },
            LoadPhuTungTheoDoi: function () {
                let self = this;
                let mydata = {};
                if (!self.BaoCaoPhuTungTheoDoi.isPageSelect) {
                    self.BaoCaoPhuTungTheoDoi.PageList.currentPage = 1;
                }
                else {
                    self.BaoCaoPhuTungTheoDoi.isPageSelect = false;
                }
                mydata.TextSearch = self.TextSearch;
                mydata.CurrentPage = self.BaoCaoPhuTungTheoDoi.PageList.currentPage;
                mydata.PageSize = self.BaoCaoPhuTungTheoDoi.PageList.PageSize;
                mydata.TrangThais = [""];
                self.ListTrangThai.filter(p => p.Checked === true).forEach(p => mydata.TrangThais.push(p.Value));
                mydata.TrangThais.shift();
                $.ajax({
                    url: self.UrlApi.ReportApi + "GetListPhuTungTheoDoi",
                    type: "POST",
                    dataType: "JSON",
                    data: mydata,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8"
                }).done(function (result) {
                    if (result.res === true) {
                        self.BaoCaoPhuTungTheoDoi.data = result.dataSoure.data;
                        self.BaoCaoPhuTungTheoDoi.PageList.ListPage = result.dataSoure.ListPage;
                        self.BaoCaoPhuTungTheoDoi.PageList.PageView = result.dataSoure.PageView;
                        self.BaoCaoPhuTungTheoDoi.PageList.NumberOfPage = result.dataSoure.NumberOfPage;
                    }
                    else {
                        console.log(result.mess);
                        commonStatisJs.ShowMessageDanger("Có lỗi xảy ra trong quá trình tải dữ liệu. Vui lòng thử lại.");
                    }
                }).fail(function (jqXHR, textStatus) {
                    console.log(textStatus);
                }).always(function () {
                    self.isLoading = false;
                    self.BaoCaoPhuTungTheoDoi.Reload = false;
                });
            },
            LoadNhatKyHoatDong: function () {
                let self = this;
                self.GetBaoCaoToiGianText();
                let mydata = {};
                mydata.TextSearch = self.TextSearch;
                mydata.CurrentPage = self.BaoCaoThoiGianHoatDong.PageList.currentPage;
                mydata.PageSize = self.BaoCaoThoiGianHoatDong.PageList.PageSize;
                mydata.ThoiGianFrom = self.ThoiGianFrom;
                mydata.ThoiGianTo = self.ThoiGianTo;
                $.ajax({
                    url: self.UrlApi.ReportApi + "GetThoiGianHoatDong",
                    type: "POST",
                    dataType: "JSON",
                    data: mydata,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8"
                }).done(function (result) {
                    if (result.res === true) {
                        self.BaoCaoThoiGianHoatDong.data = result.dataSoure.data;
                        self.BaoCaoThoiGianHoatDong.PageList.ListPage = result.dataSoure.ListPage;
                        self.BaoCaoThoiGianHoatDong.PageList.PageView = result.dataSoure.PageView;
                        self.BaoCaoThoiGianHoatDong.PageList.NumberOfPage = result.dataSoure.NumberOfPage;
                    }
                    else {
                        console.log(result.mess);
                        commonStatisJs.ShowMessageDanger("Có lỗi xảy ra trong quá trình tải dữ liệu. Vui lòng thử lại.");
                    }
                }).fail(function (jqXHR, textStatus) {
                    console.log(textStatus);
                }).always(function () {
                    self.isLoading = false;
                    self.BaoCaoThoiGianHoatDong.Reload = false;
                });
            },
            PageChageBaoCaoPhuTungTheoDoi: function (value) {
                let self = this;
                if (self.BaoCaoPhuTungTheoDoi.PageList.currentPage !== value.currentPage) {
                    self.BaoCaoPhuTungTheoDoi.PageList.currentPage = value.currentPage;
                    self.BaoCaoPhuTungTheoDoi.isPageSelect = true;
                    self.LoadPhuTungTheoDoi();
                } else if (self.BaoCaoPhuTungTheoDoi.PageList.PageSize !== value.pageSize) {
                    self.BaoCaoPhuTungTheoDoi.PageList.PageSize = value.pageSize;
                    self.LoadPhuTungTheoDoi();
                }
            },
            PageChangeBaoCaoNhatKyHoatDong: function (value) {
                let self = this;
                if (self.BaoCaoThoiGianHoatDong.PageList.currentPage !== value.currentPage) {
                    self.BaoCaoThoiGianHoatDong.PageList.currentPage = value.currentPage;
                    self.BaoCaoThoiGianHoatDong.isPageSelect = true;
                    self.LoadNhatKyHoatDong();
                } else if (self.BaoCaoThoiGianHoatDong.PageList.PageSize !== value.pageSize) {
                    self.BaoCaoThoiGianHoatDong.PageList.PageSize = value.pageSize;
                    self.LoadNhatKyHoatDong();
                }
            },
            TextSearchOnKeyUp: function (e) {
                let self = this;
                if (e.keyCode === 13) {
                    self.TextSearchChange();
                }
            },
            TextSearchChange: function () {
                let self = this;
                self.BaoCaoPhuTungTheoDoi.Reload = true;
                self.BaoCaoThoiGianHoatDong.Reload = true;
                self.LoadData();
            },
            GetPageList: function () {
                let self = this;
                let page = self.PageList.NumberOfPage;
                let pagenow = self.PageList.currentPage;
                let listpage = [];
                if (page > 5) {
                    if (pagenow > 2 && pagenow < (page - 2)) {
                        listpage = Array.from({ length: 5 }, (x, i) => i + pagenow - 2);
                    }
                    else if (pagenow >= (page - 2)) {
                        if (pagenow !== page) {
                            listpage = Array.from({ length: 5 }, (x, i) => i + pagenow - 3);
                        }
                        else {
                            listpage = Array.from({ length: 5 }, (x, i) => i + pagenow - 4);
                        }
                    }
                    else {
                        listpage = [1, 2, 3, 4, 5];
                    }
                }
                else {
                    if (page != 0) {
                        listpage = Array.from({ length: page }, (x, i) => i + 1);
                    }
                }
                self.PageList.ListPage = listpage;
            },
            onCallThoiGian: function (value) {
                console.log("onCallThoiGian");
                let self = this;
                if (value.fromdate !== '2016-01-01') {
                    self.ThoiGianFrom = value.fromdate;
                    self.ThoiGianTo = value.todate;
                }
                else {
                    self.ThoiGianFrom = '';
                    self.ThoiGianTo = '';
                }
                if (self.onRefresh === false) {
                    self.LoadData();
                }
                self.ThoiGianTypeTime = value.radioselect;
            },
            GetBaoCaoToiGianText: function () {
                let self = this;
                if (self.ThoiGianFrom === '' && self.ThoiGianTo === '') {
                    self.BaoCaoThoiGianText = 'Toàn thời gian';
                }
                else {
                    self.BaoCaoThoiGianText = 'Từ ngày ' + moment(self.ThoiGianFrom).format('DD/MM/YYYY') + ' đến ngày ' + moment(self.ThoiGianTo).add(-1, 'days').format('DD/MM/YYYY');
                }
                
            },
            oncallTrangThaiSelect: function () {
                let self = this;
                self.BaoCaoPhuTungTheoDoi.Reload = true;
                self.LoadData();
            },
        },
        created: function () {
            let self = this;
            self.GetHeader();
            self.LoadData();
        },
        watch: {
            LoaiBaoCao: {
                handler: function () {
                    let self = this;
                    self.GetBaoCaoTieuDe();
                    self.GetHeader();
                    self.LoadData();
                },
                deep: true
            },
        }
    });
</script>